{
  "hash": "ade2b88c173851f1e152371753428394",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R-Shinylive app in Quarto \"\nfilters:\n  - shinylive\n  \nlisting:\n  contents: posts/appShiny\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\n  fields: [image, date, title, reading-time, description]\npage-layout: full\ntitle-block-banner: false\nimage: \"shine.jpg\"\ndate: \"2024-07-28\"\ncategories: [R-Shinylive, ggplot2, Quarto]\ndescription: \"An Example of how to build R-Shinylive app in Quarto\"\n  \n---\n\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 720\n#| code-fold: false\n\nlibrary(shiny)\nlibrary(DT)\nlibrary(bslib)\nlibrary(ggplot2)\n\n# Function to generate the sample data\ngenerate_data <- function() {\n  set.seed(123)  # For reproducibility\n  \n  regions <- c(\"AFRICA\", \"AMERICA\", \"ASIA\", \"EUROPE\")\n  years <- 2000:2020\n  data <- expand.grid(region = regions, year = years)\n  \n  data$doses <- sample(100000:1000000, nrow(data), replace = TRUE)\n  data$population <- sample(1000000:10000000, nrow(data), replace = TRUE)\n  data$coverage <- (data$doses / data$population) * 100\n  \n  return(data)\n}\n\n# Generate the data\ndata <- generate_data()\n\n# Define UI for application\nui <- page_sidebar(\n  title = \"Vaccination Coverage Data\",\n  \n  sidebar = sidebarPanel(\n    width = 30,\n    selectInput(\"region\", \"Select Region:\", \n                choices = c(\"All\", \"AFRICA\", \"AMERICA\", \"ASIA\", \"EUROPE\"), \n                selected = \"All\",\n                multiple = FALSE),\n    sliderInput(\"yearRange\", \"Select Year Range:\", \n                min = 2000, max = 2020, \n                value = c(2000, 2020), step = 1)\n  ),\n  \n  navbarPage(\n  title = \"Vaccination Coverage Data\",\n  \n    # Example of a tab with a plot (additional feature)\n  tabPanel(\n    \"Plot\",\n    h3(\"Coverage Plot\"),\n    plotOutput(\"coveragePlot\")\n  )\n  )\n)\n# Define server logic required to display the table and other components\nserver <- function(input, output) {\n  # Reactive expression to filter data based on selected region and year range\n  filtered_data <- reactive({\n    data_filtered <- data\n    \n    if (input$region != \"All\") {\n      data_filtered <- subset(data_filtered, region == input$region)\n    }\n    \n    data_filtered <- subset(data_filtered, year >= input$yearRange[1] & year <= input$yearRange[2])\n    \n    return(data_filtered)\n  })\n\n  # Render a plot of coverage\n  output$coveragePlot <- renderPlot({\n    library(ggplot2)\n    ggplot(filtered_data(), aes(x = year, y = coverage, color = region)) +\n      geom_line() +\n      geom_point()+\n      labs(\n        title = \"Vaccination Coverage Over Time\",\n        x = \"Year\",\n        y = \"Coverage (%)\"\n      ) +\n       scale_color_manual(name = \"Region\",\n                         values = c(\"AFRICA\" = \"#E88D67\",\n                                    \"AMERICA\" = \"#DA7297\",\n                                    \"ASIA\" = \"#006989\",\n                                    \"EUROPE\" =\"#729762\"))+\n      theme_minimal()\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n```\n\nThis example demonstrates how you can build an interactive dashboard in Quarto using the R Shinylive app that runs without a server.\n\n\n## Installation\nStep 1: Install the r-shinylive  R package from CRAN. It can be obtained from the R console using the following command\n`install.packages(\"shinylive\")`\n\n## Installing the Quarto Extension for r-shinylive\nStep 2: Install the Quarto extension for `shinylive`. In the Terminal tab, run the following command:\n`quarto add quarto-ext/shinylive`\n\n\n\n## Embedding the R Shinylive in Quarto\nTo Include a Shiny app directly in your Quarto file `.qmd`, you need to add a filter key for `shinylive` at the top of the desired Quarto file. Opne your Quarto file and add following YAML header:\n\n\n\nEmbed the complete R Shinylive app into a `{shinylive-r}`. Ensure to set `standarlone:true` and consider adjusting the app height with `viewerHeight:600`\n\n## Render your Shinylive App into your terminal\n`quarto preview R-shinylive-shinyapp.qmd --no-browser --no-watch-inputs`\n\n\n\n\n\n::: {.cell standalone='true'}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load library \nlibrary(shiny)\nlibrary(DT)\nlibrary(bslib)\nlibrary(ggplot2)\n\n# Function to generate the sample data\ngenerate_data <- function() {\n  set.seed(123)  # For reproducibility\n  \n  regions <- c(\"AFRICA\", \"AMERICA\", \"ASIA\", \"EUROPE\")\n  years <- 2000:2020\n  data <- expand.grid(region = regions, year = years)\n  \n  data$doses <- sample(100000:1000000, nrow(data), replace = TRUE)\n  data$population <- sample(1000000:10000000, nrow(data), replace = TRUE)\n  data$coverage <- (data$doses / data$population) * 100\n  \n  return(data)\n}\n\n# Generate the data\ndata <- generate_data()\n\n# Define UI for application\nui <- page_sidebar(\n  title = \"Vaccination Coverage Data\",\n  \n  sidebar = sidebarPanel(\n    width = 30,\n    selectInput(\"region\", \"Select Region:\", \n                choices = c(\"All\", \"AFRICA\", \"AMERICA\", \"ASIA\", \"EUROPE\"), \n                selected = \"All\",\n                multiple = FALSE),\n    sliderInput(\"yearRange\", \"Select Year Range:\", \n                min = 2000, max = 2020, \n                value = c(2000, 2020), step = 1)\n  ),\n  \n  navbarPage(\n  title = \"Vaccination Coverage Data\",\n  \n    # Example of a tab with a plot (additional feature)\n  tabPanel(\n    \"Plot\",\n    h3(\"Coverage Plot\"),\n    plotOutput(\"coveragePlot\")\n  )\n  )\n)\n\n\n# Define server logic required to display the table and other components\nserver <- function(input, output) {\n  # Reactive expression to filter data based on selected region and year range\n  filtered_data <- reactive({\n    data_filtered <- data\n    \n    if (input$region != \"All\") {\n      data_filtered <- subset(data_filtered, region == input$region)\n    }\n    \n    data_filtered <- subset(data_filtered, year >= input$yearRange[1] & year <= input$yearRange[2])\n    \n    return(data_filtered)\n  })\n\n  # Render a plot of coverage\n  output$coveragePlot <- renderPlot({\n    library(ggplot2)\n    ggplot(filtered_data(), aes(x = year, y = coverage, color = region)) +\n      geom_line() +\n      geom_point()+\n      labs(\n        title = \"Vaccination Coverage Over Time\",\n        x = \"Year\",\n        y = \"Coverage (%)\"\n      ) +\n       scale_color_manual(name = \"Region\",\n                         values = c(\"AFRICA\" = \"#E88D67\",\n                                    \"AMERICA\" = \"#DA7297\",\n                                    \"ASIA\" = \"#006989\",\n                                    \"EUROPE\" =\"#729762\"))+\n      theme_minimal()\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}