{
  "hash": "c4fe58f73087df9089ee08301f66bb28",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ShinyLive App in Quarto\"\nauthor: \"Your Name\"\noutput: html\nfilters:\n  - shinylive\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#| standalone: true\n#| viewerHeight: 600\n#| code-fold: false\n\nlibrary(shiny)\nlibrary(bslib)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'bslib'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:utils':\n\n    page\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'DT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rio)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/joaomuianga/Documents/myblog\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)  \nlibrary(ggplot2)\n\n# Define UI for application\nui <- fluidPage(\n  titlePanel(\"Global DTPV3 Immunization Coverage\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"select_region\", \"Select Region\", \n                  choices = c(\"All\", \n                              \"AFRO\" = \"AFR\", \n                              \"AMRO\" =\"AMR\", \n                              \"EMRO\" = \"EMR\",\n                              \"SEARO\" = \"SEAR\", \n                              \"WPRO\" = \"WPR\", \n                              \"EURO\" = \"EUR\")),\n      sliderInput(\"year_range\", \"Select Year Range\", min = 2000, max = 2020, value = c(2000, 2020))\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Coverage Plot\", plotOutput(\"coverage_plot\")),\n        tabPanel(\"Data Table\", DTOutput(\"data_table\")),\n        tabPanel(\"Summary\", verbatimTextOutput(\"summary\"))\n      )\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  # Import file\n  linelist <- reactive({\n    file_path <- \"data/shiny_data.csv\"\n    if (file.exists(file_path)) {\n      tryCatch({\n        data <- read_csv(file_path)\n        return(data)\n      }, error = function(e) {\n        return(NULL)\n      })\n    } else {\n      return(NULL)\n    }\n  })\n\n  filtered_linelist <- reactive({\n    data <- linelist()\n    if (is.null(data)) return(NULL)\n\n    linelist_filtered <- data\n\n    if (input$select_region != \"All\") {\n      linelist_filtered <- subset(linelist_filtered, region == input$select_region)\n    }\n\n    linelist_filtered <- subset(linelist_filtered, year >= input$year_range[1] & year <= input$year_range[2])\n\n    return(linelist_filtered)\n  })\n\n  output$data_table <- renderDT({\n    datatable(filtered_linelist())\n  })\n\n  output$summary <- renderPrint({\n    summary(filtered_linelist())\n  })\n\n  # Render Coverage Plot\n  output$coverage_plot <- renderPlot({\n    data <- filtered_linelist()\n    if (!is.null(data)) {\n      ggplot(data, aes(x = year, y = r_coverage, color = region, group = region)) +\n        geom_line() +\n        geom_point() +\n        scale_y_continuous(labels = scales::label_percent(scale = 100)) +\n        scale_color_manual(name = \"Region\",\n                           values = c(\"AFR\" = \"#508D4E\",\n                                      \"AMR\" = \"#987D9A\",\n                                      \"EMR\" = \"#E90074\",\n                                      \"SEAR\" = \"#E68369\",\n                                      \"WPR\" = \"#508C9B\",\n                                      \"EUR\" = \"#F4CE14\")) +\n        labs(title = \"DPTCV3 Global Coverage by Year and Region\",\n             x = \"Year\",\n             y = \"Coverage Percentage\") +\n        theme(axis.text = element_text(size = 13),\n              axis.title = element_text(size = 16),\n              legend.title = element_text(size = 16),\n              legend.text = element_text(size = 12))\n    }\n  })\n}\n\n# Create Shiny App\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [
      "shiny_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}