{"title":"Automated Surveillance Report using R Quarto","markdown":{"yaml":{"title":"Automated Surveillance Report using R Quarto","listing":{"contents":"posts/auto_report","sort":"date desc","type":"default","categories":true,"sort-ui":false,"filter-ui":false,"fields":["image","date","title","reading-time","description"]},"page-layout":"full","title-block-banner":false,"image":"auto.jpg","date":"2024-06-30","categories":["R","Visualization","ggplot2","Summary Table"],"description":"This is an example of how to create a automated report using R Quarto with fake data.","execute":{"message":false,"warning":false,"editor_options":{"chunk_output_type":"console"}},"format":{"html":{"code-fold":true}},"editor":"visual"},"headingText":"Load Packages","containsRefs":false,"markdown":"\n\n\nWe will load janitor for data cleaning, [tidyverse](https://tidyr.tidyverse.org) for data management and visualization, [epikit](https://r4epi.github.io/epikit/), [apyramid](https://r4epi.github.io/apyramid/), to import data, cleaning, create plot and table presentation.\n\n```{r }\n#| label: load_package\n#| code-fold: false\n\n# This chunk loads packages\npacman::p_load(\n     rio,          # for importing data\n     here,         # for locating files\n     skimr,        # for reviewing the data\n     janitor,      # for data cleaning  \n     epikit,       # creating age categories\n     gtsummary,    # creating tables  \n     RColorBrewer, # for colour palettes\n     viridis,      # for more colour palettes\n     scales,       # percents in tables  \n     flextable,    # for making pretty tables\n     gghighlight,  # highlighting plot parts  \n     ggExtra,      # special plotting functions\n     matchmaker, # dictionary-based cleaning\n     tsibble,      # for epiweek \n     forcats,      # Missing values\n     scales,       # works with date\n     apyramid,     # age pyramid\n     rstatix,      # summary statistic\n     ggExtra,      # special plotting functions\n     tidyverse     # for data management and visualization\n     \n)\n```\n\n# Import dataset\n\nThis is a fake data of fever outbreak in Mali 2020.\n\n```{r}\n#| label: import_data\n#| code-fold: false\n# This chunck import the linelist of yellow fever\nyellow_fever_raw <- import(here(\"data\", \"yelow_fever_ mali_09_01_2020.xlsx\"))\n\n```\n\n```{r}\n#| label: data_summary\n#| eval: false\n\nskimr::skim(yellow_fever_raw)\n```\n\n# Data Cleaning\n\n```{r}\n#| label: data_cleaning\n#| code-fold: false\n#| warning: false\n#| message: false\n\nyellow_fever_clean <- yellow_fever_raw%>%\n# automatically clean column name\n  janitor::clean_names() %>%\n  \n# manually clean column names to English\n  rename(\n    #new            #old\n    n_order =num_ordre,\n    age_month = age_mois,\n    age_year = age_an,\n    gender = sexe,\n    health_area = aire_de_sante,\n    district_not = district_sanitaire_notifiant,\n    district_res = district_sanitaire_de_residence,\n    date_onset = date_de_consultation,\n    fever = fievre,\n    symptoms = symptomes,\n    date_death = date_de_deces,\n    classification = classification_finale,\n    outcome = evolution\n  ) %>%\n\n# de-duplicate rows\n  distinct()%>%\n  \n#convert date onset to date class\n  mutate(date_onset = ymd(date_onset)) %>%\n  \n  # convert age (month and year) to numeric class\n  mutate(age_month = as.numeric(age_month),\n         age_year = as.numeric(age_year)) %>%\n  \n  # convert \"Unknown\" gender to NA\n  mutate(gender = na_if(gender, \"Unknown\"))%>%\n  \n  # create column epiweek \n  mutate(epiweek = floor_date(date_onset, \n                    unit = \"week\",\n                    week_start = 1\n                              )) %>%\n  \n# properly record missing values in many character columns\n  mutate(across(.cols = where(is.character), .fns = ~na_if(.x, \"\"))) %>%\n  \n# re-code status columns\n  mutate(status = recode(status,\n          # for reference: OLD  = NEW                 \n          \"Confirmé\" = \"confirmed\",\n          \"Probable\" = \"probable\",\n          \"Suspect\" = \"suspected\" ))%>%\n  \n# re-code outcome columns\n  mutate(outcome= recode(outcome,\n          # for reference: OLD  = NEW                 \n          \"Vivant\" = \"alive\",\n          \"Décédé\" = \"dead\"))%>%\n  \n      # re-code classification columns\n  mutate(classification = recode(classification,\n          # for reference: OLD  = NEW                 \n          \"Confirme\" = \"confirmed\",\n          \"Probable\" = \"probable\",\n          \"Non cas\" = \"no_case\",\n          \"Suspect\" = \"suspected\"))%>%\n  \n  # re-code some names in symptoms columns\n  mutate(symptoms = recode(symptoms,\n                           # for reference: OLD  = NEW   \n                           \"Fièvre, ictère,\" = \"Fièvre, ictère\",\n                           \"Fievre plus ictere\" = \"Fièvre, ictère\",\n                           \"Icteère, fièvre, vomissement\" = \"Ictère, fivre, Vomissement\",\n                           \"fièvre, ictère, vomissement\" = \"Ictère, fivre, Vomissement\",\n                           \"Fièvre,Fièvre, Vomissemnt\" = \"Fièvre, Vomissemnt\")) %>%\n\n# create column age_years\n  mutate(age_years = case_when(\n    age_year != is.na(age_year) ~ age_year,            # if column is age_year keep age_year\n    age_month !=  is.na(age_month) ~ age_month/12,     # if column age_month is month divide by 12 \n     .default = NULL                                   # if age_year missing assume age_years, else NA\n  )) %>%\n  \n  # transform to numeric\n  mutate(age_years = as.numeric(age_years)) %>%\n\n# age_class column\nmutate(age_class = ifelse(age_years >=18, \"adult\", \"child\")) %>% \n  \n# create age categories column\n  mutate (age_cat = cut(\n    age_years,\n    breaks = c( 0 , 5,  15, 25, 100),          \n    right = FALSE,\n    include.lowest = TRUE,\n    labels = c(\"<5\", \"5-14\", \"15-24\", \"+25\")),\n    \n    age_cat = fct_explicit_na(\n      age_cat,\n     na_level = \"Missing age\"\n    )) %>%\n  \n\n# check similar column in district_res and district_dect\n mutate(moved = district_res != district_not)%>%\n  \n# create new column named district to fill-in missing values\nmutate(district = coalesce(district_not, district_res)) %>%\n  \n# re-code districts columns\n  mutate(district = recode(district,\n          # for reference: OLD  = NEW                 \n          \"Ouelessebougou\" = \"Ouélessebougou\",\n          \"Sefeto\" = \"Sofeto\"))%>%\n  \n# select column in study\n  select(n_order, starts_with(\"district\"), date_onset, epiweek, age_cat, age_years, gender, status, classification, outcome, everything())\n\n```\n\n# Highlights for Introduction\n\n-   `r nrow(yellow_fever_clean)` Number of new cases reported during the epi-week [**`r max(yellow_fever_clean$epiweek)` - N°4**]{style=\"color: green;\"} including `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases and `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` deaths.\n-   `r nrow(yellow_fever_clean)` *Cumulative number of cases since the beginning of the outbreaks including* `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases, `r sum(yellow_fever_clean$status == \"probable\", na.rm = T)` probable cases and `r sum(yellow_fever_clean$status == \"suspected\", na.rm = T)` suspected cases.\n-   `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` *Cumulative number of deaths*, providing a case fatality rate of `r  round(sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)/nrow(yellow_fever_clean)*100, digits=0)`%.\n\nThis is the code `inline` that create the Highlights.\n\n```{r}\n#| code-fold: false\n\n#-   `r nrow(yellow_fever_clean)` Number of new cases reported during the epi-week [ **`r max(yellow_fever_clean$epiweek)` - N°4**]{style=\"color: green;\"} including `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases and `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` deaths.\n#-   `r nrow(yellow_fever_clean)` *Cumulative number of cases since the beginning of the outbreaks including* `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases, `r sum(yellow_fever_clean$status == \"probable\", na.rm = T)` probable cases and `r sum(yellow_fever_clean$status == \"suspected\", na.rm = T)` suspected cases.\n#-   `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` *Cumulative number of deaths*, providing a case fatality rate of `r  round(sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)/nrow(yellow_fever_clean)*100, digits=0)`%.\n```\n\n# Summary Table\n\n```{r}\n#| label: summary_table\n#| code-fold: false\n#| warning: false\n#| message: false\n\nborder_style = officer::fp_border(color=\"black\", width=1)\n\n# Table summarizing the number of cases (confirmed, probable, and suspected) by District sanitaire: Cumulative and last epi-week\nyellow_fever_clean %>% \n  group_by(district) %>%\n  summarise(\n            cum_cases = n(),\n            case_1wk = sum(cum_cases[epiweek > max(epiweek)-7], na.rm = TRUE),\n            suspected = sum(status == \"suspected\", na.rm = T),\n            confirmed = sum(status == \"confirmed\", na.rm = T),\n            probable = sum(status == \"probable\", na.rm = T)) %>%\n  filter(cum_cases >1) %>%\n  adorn_totals(where = \"col\") %>%\n  adorn_percentages(\"col\") %>%\n  adorn_pct_formatting() %>%\n  adorn_ns(position = \"front\") %>%\n  qflextable()  %>%\n  set_header_labels(\n    district = \"District\",\n    cum_cases = \"Cumulative Cases\",\n    case_1wk = \"Cases - Last Week\",\n    suspected = \"Supected cases \",\n    confirmed = \"Confirmed cases \",\n    probable = \"Probable cases \"\n  ) %>%\n   vline(part = \"all\", j = c(1:5), border = border_style)%>%\n   bg(part = \"body\", bg = \"gray95\") %>%\n   bg(., i= ~ district == \"Bougouni\", part = \"body\", bg = \"#91c293\")\n\n```\n\n# Cases by classification by outcome\n\nPlot the Distribution of cases by classification and by outcome using geom_bar() function.\n\n```{r}\n#| label: geom_bar\n#| code-fold: false\n#| warning: false\n#| message: false\n\nggplot(data = yellow_fever_clean, \n       mapping = aes(x = classification,\n                     fill=outcome)) +\n  geom_bar( col = \"black\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"alive\" = \"#1c9099\",\n                              \"dead\" = \"#c51b8a\"),\n                    labels = c(\"alive\" = \"Alive\",\n                                \"dead\" = \"Dead\") )+\n  labs(\n    x = \"Classification\",\n    y = \"Number\",\n    fill = \"Outcome\"\n  ) +\n  theme(\n    axis.title = element_text(size = 14),\n    axis.text.x = element_text(size = 11),\n    axis.text.y = element_text(size = 12)\n  )\n```\n\n# Epicurve of symptoms and classification\n\nPlot a epicurve showing distribution of cases by week of symptoms onset and classification.\n\n```{r}\n#| label: epicurve\n#| code-fold: false\n#| warning: false\n#| message: false\nggplot(data = yellow_fever_clean, \n       mapping = aes(x = epiweek)) +\n geom_histogram(aes(fill = classification)) +\n  scale_x_date(date_breaks = \"1 month\",\n               date_labels =  \"%d %b \\n %Y\", \n               expand = c(0,0)) +\n  scale_fill_manual(\n                     values = c( \"confirmed\" = \"#2b8cbe\", \n                                  \"probable\" = \"purple\",\n                                 \"suspected\" = \"#d95f0e\"),\n                    labels = c(\"confirmed\" = \"Confirmed\",\n                               \"probable\"= \"Probable\",\n                               \"suspected\" = \"Suspected\"),\n                    name = \"Classification\") +\n  facet_wrap(~district) +\n  theme_bw() +\n  labs( x = \"Epi- week\",\n        y = \"Cases\",\n        fill = \"Classification\",\n        caption = str_glue(\"A total of {n_distinct(yellow_fever_clean$district)} districts reported  Yellow fever cases \\nCumulative cases of {nrow(yellow_fever_clean)} as of {max(yellow_fever_clean$epiweek)}\"))\n\n```\n\n# Age Pyramid\n\nPlot the distribution of cases by age group and gender using [apyramid](https://r4epi.github.io/apyramid/) function.\n\n```{r}\n#| label: age_pyramid\n#| code-fold: false\n#| warning: false\n#| message: false\napyramid::age_pyramid(data = yellow_fever_clean,\n                      age_group = age_cat,\n                      split_by = gender,\n                      show_midpoint = FALSE) +\n  scale_fill_manual(values = c(\"M\" = \"orange\",\n                               \"F\" = \"purple\"),\n                    labels = c(\"M\" = \"Male\",\n                               \"F\" = \"Female\"),\n                    na.value = \"grey\")+\n  labs(title = \"Age Pyramid\",\n       y = \"Cases\",\n       x = \"Age Category\",\n       fill = \"Gender\",\n       caption = str_glue(\"Total cases (%):  in Male {fmt_count(yellow_fever_clean, gender == 'M')} and Female {fmt_count(yellow_fever_clean, gender == 'F')}\")) +\n  theme(\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    legend.title = element_text(size = 14)\n    \n  )\n  \n\n```\n","srcMarkdownNoYaml":"\n\n# Load Packages\n\nWe will load janitor for data cleaning, [tidyverse](https://tidyr.tidyverse.org) for data management and visualization, [epikit](https://r4epi.github.io/epikit/), [apyramid](https://r4epi.github.io/apyramid/), to import data, cleaning, create plot and table presentation.\n\n```{r }\n#| label: load_package\n#| code-fold: false\n\n# This chunk loads packages\npacman::p_load(\n     rio,          # for importing data\n     here,         # for locating files\n     skimr,        # for reviewing the data\n     janitor,      # for data cleaning  \n     epikit,       # creating age categories\n     gtsummary,    # creating tables  \n     RColorBrewer, # for colour palettes\n     viridis,      # for more colour palettes\n     scales,       # percents in tables  \n     flextable,    # for making pretty tables\n     gghighlight,  # highlighting plot parts  \n     ggExtra,      # special plotting functions\n     matchmaker, # dictionary-based cleaning\n     tsibble,      # for epiweek \n     forcats,      # Missing values\n     scales,       # works with date\n     apyramid,     # age pyramid\n     rstatix,      # summary statistic\n     ggExtra,      # special plotting functions\n     tidyverse     # for data management and visualization\n     \n)\n```\n\n# Import dataset\n\nThis is a fake data of fever outbreak in Mali 2020.\n\n```{r}\n#| label: import_data\n#| code-fold: false\n# This chunck import the linelist of yellow fever\nyellow_fever_raw <- import(here(\"data\", \"yelow_fever_ mali_09_01_2020.xlsx\"))\n\n```\n\n```{r}\n#| label: data_summary\n#| eval: false\n\nskimr::skim(yellow_fever_raw)\n```\n\n# Data Cleaning\n\n```{r}\n#| label: data_cleaning\n#| code-fold: false\n#| warning: false\n#| message: false\n\nyellow_fever_clean <- yellow_fever_raw%>%\n# automatically clean column name\n  janitor::clean_names() %>%\n  \n# manually clean column names to English\n  rename(\n    #new            #old\n    n_order =num_ordre,\n    age_month = age_mois,\n    age_year = age_an,\n    gender = sexe,\n    health_area = aire_de_sante,\n    district_not = district_sanitaire_notifiant,\n    district_res = district_sanitaire_de_residence,\n    date_onset = date_de_consultation,\n    fever = fievre,\n    symptoms = symptomes,\n    date_death = date_de_deces,\n    classification = classification_finale,\n    outcome = evolution\n  ) %>%\n\n# de-duplicate rows\n  distinct()%>%\n  \n#convert date onset to date class\n  mutate(date_onset = ymd(date_onset)) %>%\n  \n  # convert age (month and year) to numeric class\n  mutate(age_month = as.numeric(age_month),\n         age_year = as.numeric(age_year)) %>%\n  \n  # convert \"Unknown\" gender to NA\n  mutate(gender = na_if(gender, \"Unknown\"))%>%\n  \n  # create column epiweek \n  mutate(epiweek = floor_date(date_onset, \n                    unit = \"week\",\n                    week_start = 1\n                              )) %>%\n  \n# properly record missing values in many character columns\n  mutate(across(.cols = where(is.character), .fns = ~na_if(.x, \"\"))) %>%\n  \n# re-code status columns\n  mutate(status = recode(status,\n          # for reference: OLD  = NEW                 \n          \"Confirmé\" = \"confirmed\",\n          \"Probable\" = \"probable\",\n          \"Suspect\" = \"suspected\" ))%>%\n  \n# re-code outcome columns\n  mutate(outcome= recode(outcome,\n          # for reference: OLD  = NEW                 \n          \"Vivant\" = \"alive\",\n          \"Décédé\" = \"dead\"))%>%\n  \n      # re-code classification columns\n  mutate(classification = recode(classification,\n          # for reference: OLD  = NEW                 \n          \"Confirme\" = \"confirmed\",\n          \"Probable\" = \"probable\",\n          \"Non cas\" = \"no_case\",\n          \"Suspect\" = \"suspected\"))%>%\n  \n  # re-code some names in symptoms columns\n  mutate(symptoms = recode(symptoms,\n                           # for reference: OLD  = NEW   \n                           \"Fièvre, ictère,\" = \"Fièvre, ictère\",\n                           \"Fievre plus ictere\" = \"Fièvre, ictère\",\n                           \"Icteère, fièvre, vomissement\" = \"Ictère, fivre, Vomissement\",\n                           \"fièvre, ictère, vomissement\" = \"Ictère, fivre, Vomissement\",\n                           \"Fièvre,Fièvre, Vomissemnt\" = \"Fièvre, Vomissemnt\")) %>%\n\n# create column age_years\n  mutate(age_years = case_when(\n    age_year != is.na(age_year) ~ age_year,            # if column is age_year keep age_year\n    age_month !=  is.na(age_month) ~ age_month/12,     # if column age_month is month divide by 12 \n     .default = NULL                                   # if age_year missing assume age_years, else NA\n  )) %>%\n  \n  # transform to numeric\n  mutate(age_years = as.numeric(age_years)) %>%\n\n# age_class column\nmutate(age_class = ifelse(age_years >=18, \"adult\", \"child\")) %>% \n  \n# create age categories column\n  mutate (age_cat = cut(\n    age_years,\n    breaks = c( 0 , 5,  15, 25, 100),          \n    right = FALSE,\n    include.lowest = TRUE,\n    labels = c(\"<5\", \"5-14\", \"15-24\", \"+25\")),\n    \n    age_cat = fct_explicit_na(\n      age_cat,\n     na_level = \"Missing age\"\n    )) %>%\n  \n\n# check similar column in district_res and district_dect\n mutate(moved = district_res != district_not)%>%\n  \n# create new column named district to fill-in missing values\nmutate(district = coalesce(district_not, district_res)) %>%\n  \n# re-code districts columns\n  mutate(district = recode(district,\n          # for reference: OLD  = NEW                 \n          \"Ouelessebougou\" = \"Ouélessebougou\",\n          \"Sefeto\" = \"Sofeto\"))%>%\n  \n# select column in study\n  select(n_order, starts_with(\"district\"), date_onset, epiweek, age_cat, age_years, gender, status, classification, outcome, everything())\n\n```\n\n# Highlights for Introduction\n\n-   `r nrow(yellow_fever_clean)` Number of new cases reported during the epi-week [**`r max(yellow_fever_clean$epiweek)` - N°4**]{style=\"color: green;\"} including `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases and `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` deaths.\n-   `r nrow(yellow_fever_clean)` *Cumulative number of cases since the beginning of the outbreaks including* `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases, `r sum(yellow_fever_clean$status == \"probable\", na.rm = T)` probable cases and `r sum(yellow_fever_clean$status == \"suspected\", na.rm = T)` suspected cases.\n-   `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` *Cumulative number of deaths*, providing a case fatality rate of `r  round(sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)/nrow(yellow_fever_clean)*100, digits=0)`%.\n\nThis is the code `inline` that create the Highlights.\n\n```{r}\n#| code-fold: false\n\n#-   `r nrow(yellow_fever_clean)` Number of new cases reported during the epi-week [ **`r max(yellow_fever_clean$epiweek)` - N°4**]{style=\"color: green;\"} including `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases and `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` deaths.\n#-   `r nrow(yellow_fever_clean)` *Cumulative number of cases since the beginning of the outbreaks including* `r sum(yellow_fever_clean$status == \"confirmed\", na.rm = T)` confirmed cases, `r sum(yellow_fever_clean$status == \"probable\", na.rm = T)` probable cases and `r sum(yellow_fever_clean$status == \"suspected\", na.rm = T)` suspected cases.\n#-   `r sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)` *Cumulative number of deaths*, providing a case fatality rate of `r  round(sum(yellow_fever_clean$outcome == \"dead\", na.rm = T)/nrow(yellow_fever_clean)*100, digits=0)`%.\n```\n\n# Summary Table\n\n```{r}\n#| label: summary_table\n#| code-fold: false\n#| warning: false\n#| message: false\n\nborder_style = officer::fp_border(color=\"black\", width=1)\n\n# Table summarizing the number of cases (confirmed, probable, and suspected) by District sanitaire: Cumulative and last epi-week\nyellow_fever_clean %>% \n  group_by(district) %>%\n  summarise(\n            cum_cases = n(),\n            case_1wk = sum(cum_cases[epiweek > max(epiweek)-7], na.rm = TRUE),\n            suspected = sum(status == \"suspected\", na.rm = T),\n            confirmed = sum(status == \"confirmed\", na.rm = T),\n            probable = sum(status == \"probable\", na.rm = T)) %>%\n  filter(cum_cases >1) %>%\n  adorn_totals(where = \"col\") %>%\n  adorn_percentages(\"col\") %>%\n  adorn_pct_formatting() %>%\n  adorn_ns(position = \"front\") %>%\n  qflextable()  %>%\n  set_header_labels(\n    district = \"District\",\n    cum_cases = \"Cumulative Cases\",\n    case_1wk = \"Cases - Last Week\",\n    suspected = \"Supected cases \",\n    confirmed = \"Confirmed cases \",\n    probable = \"Probable cases \"\n  ) %>%\n   vline(part = \"all\", j = c(1:5), border = border_style)%>%\n   bg(part = \"body\", bg = \"gray95\") %>%\n   bg(., i= ~ district == \"Bougouni\", part = \"body\", bg = \"#91c293\")\n\n```\n\n# Cases by classification by outcome\n\nPlot the Distribution of cases by classification and by outcome using geom_bar() function.\n\n```{r}\n#| label: geom_bar\n#| code-fold: false\n#| warning: false\n#| message: false\n\nggplot(data = yellow_fever_clean, \n       mapping = aes(x = classification,\n                     fill=outcome)) +\n  geom_bar( col = \"black\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"alive\" = \"#1c9099\",\n                              \"dead\" = \"#c51b8a\"),\n                    labels = c(\"alive\" = \"Alive\",\n                                \"dead\" = \"Dead\") )+\n  labs(\n    x = \"Classification\",\n    y = \"Number\",\n    fill = \"Outcome\"\n  ) +\n  theme(\n    axis.title = element_text(size = 14),\n    axis.text.x = element_text(size = 11),\n    axis.text.y = element_text(size = 12)\n  )\n```\n\n# Epicurve of symptoms and classification\n\nPlot a epicurve showing distribution of cases by week of symptoms onset and classification.\n\n```{r}\n#| label: epicurve\n#| code-fold: false\n#| warning: false\n#| message: false\nggplot(data = yellow_fever_clean, \n       mapping = aes(x = epiweek)) +\n geom_histogram(aes(fill = classification)) +\n  scale_x_date(date_breaks = \"1 month\",\n               date_labels =  \"%d %b \\n %Y\", \n               expand = c(0,0)) +\n  scale_fill_manual(\n                     values = c( \"confirmed\" = \"#2b8cbe\", \n                                  \"probable\" = \"purple\",\n                                 \"suspected\" = \"#d95f0e\"),\n                    labels = c(\"confirmed\" = \"Confirmed\",\n                               \"probable\"= \"Probable\",\n                               \"suspected\" = \"Suspected\"),\n                    name = \"Classification\") +\n  facet_wrap(~district) +\n  theme_bw() +\n  labs( x = \"Epi- week\",\n        y = \"Cases\",\n        fill = \"Classification\",\n        caption = str_glue(\"A total of {n_distinct(yellow_fever_clean$district)} districts reported  Yellow fever cases \\nCumulative cases of {nrow(yellow_fever_clean)} as of {max(yellow_fever_clean$epiweek)}\"))\n\n```\n\n# Age Pyramid\n\nPlot the distribution of cases by age group and gender using [apyramid](https://r4epi.github.io/apyramid/) function.\n\n```{r}\n#| label: age_pyramid\n#| code-fold: false\n#| warning: false\n#| message: false\napyramid::age_pyramid(data = yellow_fever_clean,\n                      age_group = age_cat,\n                      split_by = gender,\n                      show_midpoint = FALSE) +\n  scale_fill_manual(values = c(\"M\" = \"orange\",\n                               \"F\" = \"purple\"),\n                    labels = c(\"M\" = \"Male\",\n                               \"F\" = \"Female\"),\n                    na.value = \"grey\")+\n  labs(title = \"Age Pyramid\",\n       y = \"Cases\",\n       x = \"Age Category\",\n       fill = \"Gender\",\n       caption = str_glue(\"Total cases (%):  in Male {fmt_count(yellow_fever_clean, gender == 'M')} and Female {fmt_count(yellow_fever_clean, gender == 'F')}\")) +\n  theme(\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    legend.title = element_text(size = 14)\n    \n  )\n  \n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"editor_options":{"chunk_output_type":"console"},"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["shinylive"],"css":["../../styles.css"],"toc":true,"toc-depth":3,"include-after-body":["../../body_footer.html"],"output-file":"auto_report.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","static-dir":"../../data","google-analytics":"G-30NH2GNE6G","cookie-consent":true,"twitter-card":true,"extensions":["quarto-ext/shinylive"],"theme":"flatly","resources":["DummyApp"],"title-block-banner":false,"author":"João Muianga","page-layout":"full","comments":{"utterances":{"repo":"joaomuianga/myblog"}},"pdf":{"toc":true},"title":"Automated Surveillance Report using R Quarto","listing":{"contents":"posts/auto_report","sort":"date desc","type":"default","categories":true,"sort-ui":false,"filter-ui":false,"fields":["image","date","title","reading-time","description"]},"image":"auto.jpg","date":"2024-06-30","categories":["R","Visualization","ggplot2","Summary Table"],"description":"This is an example of how to create a automated report using R Quarto with fake data.","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}