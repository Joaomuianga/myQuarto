{"title":"API with R to Extract data from the WHO Global Health Observatory (GHO)","markdown":{"yaml":{"title":"API with R to Extract data from the WHO Global Health Observatory (GHO) ","listing":{"contents":"posts/gho_with_api","sort":"date desc","type":"default","categories":true,"sort-ui":false,"filter-ui":false,"fields":["image","date","title","reading-time","description"]},"page-layout":"full","title-block-banner":false,"image":"api.jpg","date":"2024-06-28","categories":["R","API","Summary Table","GHO OData API"],"description":"How to Extract a list of indicators available in World Health Organization - Global Health Observatory (GHO) via API and  create a summary table.","execute":{"message":false,"warning":false,"editor_options":{"chunk_output_type":"console"}},"format":{"html":{"code-fold":true}},"editor":"visual"},"headingText":"Context / Purpose","containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n#| eval: false\nrenv::use(lockfile = \"renv.lock\")\n```\n\n\n[The Global Health Observatory (GHO)](https://www.who.int/data/gho) data repository is WHO's gateway to health-related statistics. It provides access to over 1000 indicators on priority health topics including mortality and burden of diseases, the Millenium Development Goals and more. They are updated as more recent or revised data become available.\n\nIn this scenario I will create a function to extract the indicator of *Nutrition - Prevalence of wasted children under 5 years of age* and summarise a table showing the total of countries by region that have their most recent value from the year of 2001 to 2020.\n\n# Install packages\n\nInstall and run packages, they are the fundamental units of reproducible R code. In this case we will run packages for external connections and reproduction of summarized tables.\n\n```{r}\n#| label: load-packages\n#| echo: true\n#| code-fold: false\n\npacman::p_load(\n  rio,              # Import and export files\n  here,             # File pathways\n  jsonlite,         # Read JSON file in R\n  httr,             # Request object in URL or HTML (GET(), POST())\n  glue,             # Interpret string literals that are small, fast, and dependency-free\n  janitor,          # Data cleaning and tables\n  lubridate,        # Working with dates\n  flextable,        # mMke HTML tables \n  officer,          # hHlper functions for tables\n  tidyverse         # Data management and visualization\n)\n```\n\n# Function to extract data in the GHO OData API\n\n-   First let's define the global variables, this involves setting the URL, and indicators interested. The Indicator code is: *Prevalence of wasted children under 5 years of age*.\n\n-   Second, we will create a function that requests and searches the data on the GHO website for R and converts JSON files into a data frame.\n\nCode source: Thanks [Kirstin](https://medium.com/@kirstin.lyon/connect-to-global-health-observatory-who-data-api-with-r-fef4315693a1) for useful tutorial.\n\n```{r}\n#| label: Import_data\n#| code-fold: false\n#| eval: false\n\n\n# Global variable\nurl_base <- \"https://ghoapi.azureedge.net/api/\" \n\n# Declare the type of indicators \nindicator_text <- \"prevalence\"      \nindicator_text_wasted <- \"Wasting prevalence among children under 5 years of age\"\nindicator <- \"NUTRITION_WH_2\"\n\n# The function convert a JSON in URL to tibble\nconvert_JSON_to_tbl <- function(url){\n  data <- GET(url)                                                    # Get a url\n  data_df <- fromJSON(content(data, as = \"text\", encoding = \"utf-8\")) # Convert R object to JSON\n  data_tbl <-  map_if(data_df, is.data.frame, list) %>%               # Takes a predicate function.p \n    as_tibble %>%                                                     # Turn the object such as a data frame\n    unnest(cols = c(value)) %>%                                       # Expands a list-column containing dataframe into rows and columns\n    select(-'@odata.context')                                         \n}\n\n\n###### Exploring the data\n\n# URL will provide you with the list of indicators\nall_indicators <-  convert_JSON_to_tbl(glue(url_base,\"Indicator\")) %>% \n  select(-Language)\n\n####### Create a vector for the  indicator requested\n\n# Get the indicator through code\nget_indicator_code <- all_indicators %>% \n  filter(grepl(indicator, IndicatorCode, ignore.case = TRUE))  # grepl search for matches to argument pattern\n\n# Get the indicator through text \nget_indicator_text <- all_indicators %>% \n  filter(grepl(indicator_text, IndicatorName, ignore.case = TRUE))\n\n# Get the indicator through a word \"Wasting\" \nget_indicator_text_wasted <- all_indicators %>% \n  filter(grepl(indicator_text_wasted, IndicatorName, ignore.case = TRUE))\n\n# Join the tables \nindicators <- get_indicator_code %>% \n  union(get_indicator_text) %>% \n  union(get_indicator_text_wasted)\n\n# Show in a list the names of indicator codes\nindicator_codes <- get_indicator_code %>% \n  pull(IndicatorCode)\n\n# Pull data and Convert to a List, however only extract data of interest\n# Each indicator has its own table in the WHO GHO, but in this case we would like to have one table \"Nutrition_WH\"\nindicator_data <- map(indicator_codes, function(code){       # return a list   \n  response <- GET(\n    glue(url_base, code))                                    # get URL and the 2 indicators codes found\n  content(response, \"text\")\n})\n\n\n# Converts the list to tibble with one column per field\nindicator_data_tbl <- map_dfr(indicator_data, ~ fromJSON(.x, \n                                                         simplifyVector = TRUE)  %>%\n                              as_tibble()  %>%\n                              unnest(cols = everything())) \n\nexport(indicator_data_tbl, here(\"data\", \"data_table_raw.csv\"))\n\n```\n\n# Check the data\n\nIt's always good to check the table, use the `skimr::skim(dataset)` function it provides summary statistics about variables in data frames, however let see only 5 rows and all columns.\n\n```{r}\n#| label: import_data_from_computer\n#| include: false\n#| echo: false\n# I will import from my computer\ndata_table_raw <- import(here(\"data\", \"data_table_raw.csv\"))\n\n```\n\n```{r}\n#| label: Dataset_checking\n#| tbl-cap: Summary table\n#| tbl-colwidths: [20,10]\n#| code-fold: false\n#| include: false\n#| warning: false\n#| message: false\n# Data summary\nknitr::kable(head(data_table_raw), format = \"html\")\n\n\n```\n\n# Data Cleaning\n\nTime to clean the data_table. let's use the functions from the tidyverse family of R packages, we just need to rename interested columns using the `rename()` function and reorder the columns, keeping the original ones at the end.\n\n```{r}\n#| label: data_cleaning\n#| code-fold: false\n#| eval: false\n\ndata_table <- indicator_data_tbl %>%\n  # Clean column names\n  clean_names() %>%\n  # Rename columns \n  rename(year = time_dim,\n         numeric_value = numeric_value,\n         high_value = high,\n         low_value = low,\n         country_code = spatial_dim,\n         region_code = parent_location_code,\n         region_name = parent_location,\n         indicator_code = id,\n         indicator_name = indicator_code,\n         source = odata_context) %>% \n  # Reorder the position of interest's columns\n  select(indicator_code, indicator_name, region_code, region_name, year, country_code, low_value, high_value, numeric_value, everything())\n\n```\n\n# Summary Table\n\nLet's create a nice table to show how many countries have their most recent value in the year ranges 2001-2005, 2006-2010, 2011-2015, 2016-2020.\n\n```{r}\n#| label: data_summary\n#| code-fold: false\n\ndata_table <- import(here(\"data\", \"nutrition_dataset.csv\"))\n\nborder_style <- officer::fp_border(color=\"black\", width=1)\n\n data_table %>%\n  filter(year > 2000, value>0) %>%\n  mutate(range = case_when(\n    year <2006  ~ \"2001-2005\",\n    year >2005 & year <2011 ~ \"2006-2010\",\n    year >2010 & year <2016 ~ \"2011-2015\",\n    year >2015 & year <2021 ~ \"2016-2020\"\n  )) %>%\n  select(range, region_name, country_code, value) %>%\n   \n  distinct(range, country_code, region_name)%>%\n  tabyl(region_name, range, show_na = FALSE)%>%\n  adorn_totals() %>%\n  adorn_percentages(denominator = \"col\") %>%\n  adorn_pct_formatting() %>%\n  adorn_ns(position = \"front\") %>%\n  flextable::qflextable() %>% \n  autofit() %>%\n    \n  add_header_row(\n    top = TRUE,\n    values = c(\"WHO Region\",\n               \"Total of Countries by Year Range\",\n               \"\",\n               \"\",\n               \"\")) %>%\n  set_header_labels(\n    region_name = \"\") %>%\n  merge_at(i = 1, j= 2:5, part = \"header\")%>%\n  border_remove() %>%\n  theme_booktabs()%>%\n  vline(part = \"all\", j=1, border = border_style)%>%\n  align(align = \"center\", j = c(2:5), part = \"all\") %>%\n  fontsize(i = 1, size = 12, part = \"header\") %>%\n  bold(i = 1, bold = TRUE, part = \"header\") %>%\n  bold(i = 7, bold = TRUE, part = \"body\") %>%\n  bg(part = \"body\", bg = \"gray95\")\n\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n#| eval: false\nrenv::use(lockfile = \"renv.lock\")\n```\n\n# Context / Purpose\n\n[The Global Health Observatory (GHO)](https://www.who.int/data/gho) data repository is WHO's gateway to health-related statistics. It provides access to over 1000 indicators on priority health topics including mortality and burden of diseases, the Millenium Development Goals and more. They are updated as more recent or revised data become available.\n\nIn this scenario I will create a function to extract the indicator of *Nutrition - Prevalence of wasted children under 5 years of age* and summarise a table showing the total of countries by region that have their most recent value from the year of 2001 to 2020.\n\n# Install packages\n\nInstall and run packages, they are the fundamental units of reproducible R code. In this case we will run packages for external connections and reproduction of summarized tables.\n\n```{r}\n#| label: load-packages\n#| echo: true\n#| code-fold: false\n\npacman::p_load(\n  rio,              # Import and export files\n  here,             # File pathways\n  jsonlite,         # Read JSON file in R\n  httr,             # Request object in URL or HTML (GET(), POST())\n  glue,             # Interpret string literals that are small, fast, and dependency-free\n  janitor,          # Data cleaning and tables\n  lubridate,        # Working with dates\n  flextable,        # mMke HTML tables \n  officer,          # hHlper functions for tables\n  tidyverse         # Data management and visualization\n)\n```\n\n# Function to extract data in the GHO OData API\n\n-   First let's define the global variables, this involves setting the URL, and indicators interested. The Indicator code is: *Prevalence of wasted children under 5 years of age*.\n\n-   Second, we will create a function that requests and searches the data on the GHO website for R and converts JSON files into a data frame.\n\nCode source: Thanks [Kirstin](https://medium.com/@kirstin.lyon/connect-to-global-health-observatory-who-data-api-with-r-fef4315693a1) for useful tutorial.\n\n```{r}\n#| label: Import_data\n#| code-fold: false\n#| eval: false\n\n\n# Global variable\nurl_base <- \"https://ghoapi.azureedge.net/api/\" \n\n# Declare the type of indicators \nindicator_text <- \"prevalence\"      \nindicator_text_wasted <- \"Wasting prevalence among children under 5 years of age\"\nindicator <- \"NUTRITION_WH_2\"\n\n# The function convert a JSON in URL to tibble\nconvert_JSON_to_tbl <- function(url){\n  data <- GET(url)                                                    # Get a url\n  data_df <- fromJSON(content(data, as = \"text\", encoding = \"utf-8\")) # Convert R object to JSON\n  data_tbl <-  map_if(data_df, is.data.frame, list) %>%               # Takes a predicate function.p \n    as_tibble %>%                                                     # Turn the object such as a data frame\n    unnest(cols = c(value)) %>%                                       # Expands a list-column containing dataframe into rows and columns\n    select(-'@odata.context')                                         \n}\n\n\n###### Exploring the data\n\n# URL will provide you with the list of indicators\nall_indicators <-  convert_JSON_to_tbl(glue(url_base,\"Indicator\")) %>% \n  select(-Language)\n\n####### Create a vector for the  indicator requested\n\n# Get the indicator through code\nget_indicator_code <- all_indicators %>% \n  filter(grepl(indicator, IndicatorCode, ignore.case = TRUE))  # grepl search for matches to argument pattern\n\n# Get the indicator through text \nget_indicator_text <- all_indicators %>% \n  filter(grepl(indicator_text, IndicatorName, ignore.case = TRUE))\n\n# Get the indicator through a word \"Wasting\" \nget_indicator_text_wasted <- all_indicators %>% \n  filter(grepl(indicator_text_wasted, IndicatorName, ignore.case = TRUE))\n\n# Join the tables \nindicators <- get_indicator_code %>% \n  union(get_indicator_text) %>% \n  union(get_indicator_text_wasted)\n\n# Show in a list the names of indicator codes\nindicator_codes <- get_indicator_code %>% \n  pull(IndicatorCode)\n\n# Pull data and Convert to a List, however only extract data of interest\n# Each indicator has its own table in the WHO GHO, but in this case we would like to have one table \"Nutrition_WH\"\nindicator_data <- map(indicator_codes, function(code){       # return a list   \n  response <- GET(\n    glue(url_base, code))                                    # get URL and the 2 indicators codes found\n  content(response, \"text\")\n})\n\n\n# Converts the list to tibble with one column per field\nindicator_data_tbl <- map_dfr(indicator_data, ~ fromJSON(.x, \n                                                         simplifyVector = TRUE)  %>%\n                              as_tibble()  %>%\n                              unnest(cols = everything())) \n\nexport(indicator_data_tbl, here(\"data\", \"data_table_raw.csv\"))\n\n```\n\n# Check the data\n\nIt's always good to check the table, use the `skimr::skim(dataset)` function it provides summary statistics about variables in data frames, however let see only 5 rows and all columns.\n\n```{r}\n#| label: import_data_from_computer\n#| include: false\n#| echo: false\n# I will import from my computer\ndata_table_raw <- import(here(\"data\", \"data_table_raw.csv\"))\n\n```\n\n```{r}\n#| label: Dataset_checking\n#| tbl-cap: Summary table\n#| tbl-colwidths: [20,10]\n#| code-fold: false\n#| include: false\n#| warning: false\n#| message: false\n# Data summary\nknitr::kable(head(data_table_raw), format = \"html\")\n\n\n```\n\n# Data Cleaning\n\nTime to clean the data_table. let's use the functions from the tidyverse family of R packages, we just need to rename interested columns using the `rename()` function and reorder the columns, keeping the original ones at the end.\n\n```{r}\n#| label: data_cleaning\n#| code-fold: false\n#| eval: false\n\ndata_table <- indicator_data_tbl %>%\n  # Clean column names\n  clean_names() %>%\n  # Rename columns \n  rename(year = time_dim,\n         numeric_value = numeric_value,\n         high_value = high,\n         low_value = low,\n         country_code = spatial_dim,\n         region_code = parent_location_code,\n         region_name = parent_location,\n         indicator_code = id,\n         indicator_name = indicator_code,\n         source = odata_context) %>% \n  # Reorder the position of interest's columns\n  select(indicator_code, indicator_name, region_code, region_name, year, country_code, low_value, high_value, numeric_value, everything())\n\n```\n\n# Summary Table\n\nLet's create a nice table to show how many countries have their most recent value in the year ranges 2001-2005, 2006-2010, 2011-2015, 2016-2020.\n\n```{r}\n#| label: data_summary\n#| code-fold: false\n\ndata_table <- import(here(\"data\", \"nutrition_dataset.csv\"))\n\nborder_style <- officer::fp_border(color=\"black\", width=1)\n\n data_table %>%\n  filter(year > 2000, value>0) %>%\n  mutate(range = case_when(\n    year <2006  ~ \"2001-2005\",\n    year >2005 & year <2011 ~ \"2006-2010\",\n    year >2010 & year <2016 ~ \"2011-2015\",\n    year >2015 & year <2021 ~ \"2016-2020\"\n  )) %>%\n  select(range, region_name, country_code, value) %>%\n   \n  distinct(range, country_code, region_name)%>%\n  tabyl(region_name, range, show_na = FALSE)%>%\n  adorn_totals() %>%\n  adorn_percentages(denominator = \"col\") %>%\n  adorn_pct_formatting() %>%\n  adorn_ns(position = \"front\") %>%\n  flextable::qflextable() %>% \n  autofit() %>%\n    \n  add_header_row(\n    top = TRUE,\n    values = c(\"WHO Region\",\n               \"Total of Countries by Year Range\",\n               \"\",\n               \"\",\n               \"\")) %>%\n  set_header_labels(\n    region_name = \"\") %>%\n  merge_at(i = 1, j= 2:5, part = \"header\")%>%\n  border_remove() %>%\n  theme_booktabs()%>%\n  vline(part = \"all\", j=1, border = border_style)%>%\n  align(align = \"center\", j = c(2:5), part = \"all\") %>%\n  fontsize(i = 1, size = 12, part = \"header\") %>%\n  bold(i = 1, bold = TRUE, part = \"header\") %>%\n  bold(i = 7, bold = TRUE, part = \"body\") %>%\n  bg(part = \"body\", bg = \"gray95\")\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"editor_options":{"chunk_output_type":"console"},"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["shinylive"],"css":["../../styles.css"],"toc":true,"toc-depth":3,"include-after-body":["../../body_footer.html"],"output-file":"post.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","static-dir":"../../data","google-analytics":"G-30NH2GNE6G","cookie-consent":true,"twitter-card":true,"extensions":["quarto-ext/shinylive"],"theme":"flatly","resources":["DummyApp"],"title-block-banner":false,"author":"João Muianga","page-layout":"full","comments":{"utterances":{"repo":"joaomuianga/myblog"}},"pdf":{"toc":true},"title":"API with R to Extract data from the WHO Global Health Observatory (GHO) ","listing":{"contents":"posts/gho_with_api","sort":"date desc","type":"default","categories":true,"sort-ui":false,"filter-ui":false,"fields":["image","date","title","reading-time","description"]},"image":"api.jpg","date":"2024-06-28","categories":["R","API","Summary Table","GHO OData API"],"description":"How to Extract a list of indicators available in World Health Organization - Global Health Observatory (GHO) via API and  create a summary table.","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}